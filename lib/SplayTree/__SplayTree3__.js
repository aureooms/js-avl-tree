"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = __SplayTree3__;
function __SplayTree3__(diff) {

	var insert = function insert(pt, v) {
		var w = diff(v, pt[2]) > 0 | 0;
		if (pt[w] === null) pt[w] = [null, null, v];else insert(pt[w], v);
	};

	var splay = function splay(el, v) {

		var l, r, t, y, x, d;
		l = r = x = [null, null, undefined];
		t = el;
		while (true) {
			d = diff(v, t[2]);
			if (d < 0) {
				if (!t[0]) break;
				if (diff(v, t[0][2]) < 0) {
					y = t[0];
					t[0] = y[1];
					y[1] = t;
					t = y;
					if (!t[0]) break;
				}
				r[0] = t;
				r = t;
				t = t[0];
			} else if (d > 0) {
				if (!t[1]) break;
				if (diff(v, t[1][2]) > 0) {
					y = t[1];
					t[1] = y[0];
					y[0] = t;
					t = y;
					if (!t[1]) break;
				}
				l[1] = t;
				l = t;
				t = t[1];
			} else break;
		}
		l[1] = t[0];
		r[0] = t[1];
		t[0] = x[1];
		t[1] = x[0];

		return [diff(v, t[2]) === 0, t];
	};

	var remove = function remove(el, v) {
		var r = splay(el, v);
		if (!r[0]) return r[1];

		if (r[1][0] === null) return r[1][1];else if (r[1][1] === null) return r[1][0];else {
			r[1][0] = splay(r[1][0], v)[1];
			r[1][0][1] = r[1][1];
			return r[1][0];
		}
	};

	var in_order_traversal = function in_order_traversal(pt, fn) {
		if (pt[0] !== null) in_order_traversal(pt[0], fn);
		fn(pt[2]);
		if (pt[1] !== null) in_order_traversal(pt[1], fn);
	};

	var splay_tree = function splay_tree() {
		this.pt = null;
	};

	splay_tree.prototype.insert = function (v) {
		if (this.pt === null) this.pt = [null, null, v];else insert(this.pt, v);
	};

	splay_tree.prototype.find = function (v) {
		if (this.pt === null) return [false, null];
		var r = splay(this.pt, v);
		this.pt = r[1];
		return [r[0], r[1][2]];
	};

	splay_tree.prototype.remove = function (v) {
		if (this.pt !== null) this.pt = remove(this.pt, v);
	};

	splay_tree.prototype.in_order_traversal = function (fn) {
		if (this.pt !== null) in_order_traversal(this.pt, fn);
	};

	return splay_tree;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TcGxheVRyZWUvX19TcGxheVRyZWUzX18uanMiXSwibmFtZXMiOlsiX19TcGxheVRyZWUzX18iLCJkaWZmIiwiaW5zZXJ0IiwicHQiLCJ2IiwidyIsInNwbGF5IiwiZWwiLCJsIiwiciIsInQiLCJ5IiwieCIsImQiLCJ1bmRlZmluZWQiLCJyZW1vdmUiLCJpbl9vcmRlcl90cmF2ZXJzYWwiLCJmbiIsInNwbGF5X3RyZWUiLCJwcm90b3R5cGUiLCJmaW5kIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFDd0JBLGM7QUFBVCxTQUFTQSxjQUFULENBQXdCQyxJQUF4QixFQUE2Qjs7QUFFM0MsS0FBSUMsU0FBUyxTQUFUQSxNQUFTLENBQVNDLEVBQVQsRUFBYUMsQ0FBYixFQUFlO0FBQzNCLE1BQUlDLElBQUlKLEtBQUtHLENBQUwsRUFBUUQsR0FBRyxDQUFILENBQVIsSUFBaUIsQ0FBakIsR0FBcUIsQ0FBN0I7QUFDQSxNQUFNQSxHQUFHRSxDQUFILE1BQVUsSUFBaEIsRUFBc0JGLEdBQUdFLENBQUgsSUFBUSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWFELENBQWIsQ0FBUixDQUF0QixLQUNLRixPQUFPQyxHQUFHRSxDQUFILENBQVAsRUFBY0QsQ0FBZDtBQUNMLEVBSkQ7O0FBTUEsS0FBSUUsUUFBUSxTQUFSQSxLQUFRLENBQVNDLEVBQVQsRUFBYUgsQ0FBYixFQUFlOztBQUUxQixNQUFJSSxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkI7QUFDQUwsTUFBSUMsSUFBSUcsSUFBSSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWFFLFNBQWIsQ0FBWjtBQUNBSixNQUFJSCxFQUFKO0FBQ0EsU0FBTyxJQUFQLEVBQWE7QUFDWk0sT0FBSVosS0FBS0csQ0FBTCxFQUFRTSxFQUFFLENBQUYsQ0FBUixDQUFKO0FBQ0EsT0FBSUcsSUFBSSxDQUFSLEVBQVc7QUFDVixRQUFJLENBQUNILEVBQUUs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LFlBQVdDLFNBQVgsQ0FBcUJqQixNQUFyQixHQUE4QixVQUFTRSxDQUFULEVBQVc7QUFDeEMsTUFBRyxLQUFLRCxFQUFMLEtBQVksSUFBZixFQUFxQixLQUFLQSxFQUFMLEdBQVUsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhQyxDQUFiLENBQVYsQ0FBckIsS0FDS0YsT0FBTyxLQUFLQyxFQUFaLEVBQWdCQyxDQUFoQjtBQUNMLEVBSEQ7O0FBS0FjLFlBQVdDLFNBQVgsQ0FBcUJDLElBQXJCLEdBQTRCLFVBQVNoQixDQUFULEVBQVc7QUFDdEMsTUFBRyxLQUFLRCxFQUFMLEtBQVksSUFBZixFQUFxQixPQUFPLENBQUMsS0FBRCxFQUFRLElBQVIsQ0FBUDtBQUNyQixNQUFJTSxJQUFJSCxNQUFNLEtBQUtILEVBQVgsRUFBZUMsQ0FBZixDQUFSO0FBQ0EsT0FBS0QsRUFBTCxHQUFVTSxFQUFFLENBQUYsQ0FBVjtBQUNBLFNBQU8sQ0FBQ0EsRUFBRSxDQUFGLENBQUQsRUFBT0EsRUFBRSxDQUFGLEVBQUssQ0FBTCxDQUFQLENBQVA7QUFDQSxFQUxEOztBQU9BUyxZQUFXQyxTQUFYLENBQXFCSixNQUFyQixHQUE4QixVQUFTWCxDQUFULEVBQVc7QUFDeEMsTUFBRyxLQUFLRCxFQUFMLEtBQVksSUFBZixFQUFxQixLQUFLQSxFQUFMLEdBQVVZLE9BQU8sS0FBS1osRUFBWixFQUFnQkMsQ0FBaEIsQ0FBVjtBQUNyQixFQUZEOztBQUlBYyxZQUFXQyxTQUFYLENBQXFCSCxrQkFBckIsR0FBMEMsVUFBU0MsRUFBVCxFQUFZO0FBQ3JELE1BQUcsS0FBS2QsRUFBTCxLQUFZLElBQWYsRUFBcUJhLG1CQUFtQixLQUFLYixFQUF4QixFQUE0QmMsRUFBNUI7QUFDckIsRUFGRDs7QUFJQSxRQUFPQyxVQUFQO0FBRUEiLCJmaWxlIjoiX19TcGxheVRyZWUzX18uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9fU3BsYXlUcmVlM19fKGRpZmYpe1xuXG5cdHZhciBpbnNlcnQgPSBmdW5jdGlvbihwdCwgdil7XG5cdFx0dmFyIHcgPSBkaWZmKHYsIHB0WzJdKSA+IDAgfCAwO1xuXHRcdGlmICAgKHB0W3ddID09PSBudWxsKSBwdFt3XSA9IFtudWxsLCBudWxsLCB2XTtcblx0XHRlbHNlIGluc2VydChwdFt3XSwgdik7XG5cdH07XG5cblx0dmFyIHNwbGF5ID0gZnVuY3Rpb24oZWwsIHYpe1xuXG5cdFx0dmFyIGwsIHIsIHQsIHksIHgsIGQ7XG5cdFx0bCA9IHIgPSB4ID0gW251bGwsIG51bGwsIHVuZGVmaW5lZF07XG5cdFx0dCA9IGVsO1xuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRkID0gZGlmZih2LCB0WzJdKTtcblx0XHRcdGlmIChkIDwgMCkge1xuXHRcdFx0XHRpZiAoIXRbMF0pIGJyZWFrO1xuXHRcdFx0XHRpZiAoZGlmZih2LCB0WzBdWzJdKSA8IDApIHtcblx0XHRcdFx0XHR5ID0gdFswXTtcblx0XHRcdFx0XHR0WzBdID0geVsxXTtcblx0XHRcdFx0XHR5WzFdID0gdDtcblx0XHRcdFx0XHR0ID0geTtcblx0XHRcdFx0XHRpZiAoIXRbMF0pIGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJbMF0gPSB0O1xuXHRcdFx0XHRyID0gdDtcblx0XHRcdFx0dCA9IHRbMF07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChkID4gMCkge1xuXHRcdFx0XHRpZiAoIXRbMV0pIGJyZWFrO1xuXHRcdFx0XHRpZiAoZGlmZih2LCB0WzFdWzJdKSA+IDApIHtcblx0XHRcdFx0XHR5ID0gdFsxXTtcblx0XHRcdFx0XHR0WzFdID0geVswXTtcblx0XHRcdFx0XHR5WzBdID0gdDtcblx0XHRcdFx0XHR0ID0geTtcblx0XHRcdFx0XHRpZiAoIXRbMV0pIGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxbMV0gPSB0O1xuXHRcdFx0XHRsID0gdDtcblx0XHRcdFx0dCA9IHRbMV07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGJyZWFrO1xuXHRcdH1cblx0XHRsWzFdID0gdFswXTtcblx0XHRyWzBdID0gdFsxXTtcblx0XHR0WzBdID0geFsxXTtcblx0XHR0WzFdID0geFswXTtcblxuXHRcdHJldHVybiBbZGlmZih2LCB0WzJdKSA9PT0gMCwgdF07XG5cdH07XG5cblx0dmFyIHJlbW92ZSA9IGZ1bmN0aW9uKGVsLCB2KXtcblx0XHR2YXIgciA9IHNwbGF5KGVsLCB2KTtcblx0XHRpZiAoIXJbMF0pIHJldHVybiByWzFdO1xuXG5cdFx0aWYgICAgICAoclsxXVswXSA9PT0gbnVsbCkgcmV0dXJuIHJbMV1bMV07XG5cdFx0ZWxzZSBpZiAoclsxXVsxXSA9PT0gbnVsbCkgcmV0dXJuIHJbMV1bMF07XG5cdFx0ZWxzZSB7XG5cdFx0XHRyWzFdWzBdID0gc3BsYXkoclsxXVswXSwgdilbMV07XG5cdFx0XHRyWzFdWzBdWzFdID0gclsxXVsxXTtcblx0XHRcdHJldHVybiByWzFdWzBdO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgaW5fb3JkZXJfdHJhdmVyc2FsID0gZnVuY3Rpb24ocHQsIGZuKXtcblx0XHRpZihwdFswXSAhPT0gbnVsbCkgaW5fb3JkZXJfdHJhdmVyc2FsKHB0WzBdLCBmbik7XG5cdFx0Zm4ocHRbMl0pO1xuXHRcdGlmKHB0WzFdICE9PSBudWxsKSBpbl9vcmRlcl90cmF2ZXJzYWwocHRbMV0sIGZuKTtcblx0fTtcblxuXG5cdHZhciBzcGxheV90cmVlID0gZnVuY3Rpb24oKXsgdGhpcy5wdCA9IG51bGw7IH07XG5cblx0c3BsYXlfdHJlZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24odil7XG5cdFx0aWYodGhpcy5wdCA9PT0gbnVsbCkgdGhpcy5wdCA9IFtudWxsLCBudWxsLCB2XTtcblx0XHRlbHNlIGluc2VydCh0aGlzLnB0LCB2KTtcblx0fTtcblxuXHRzcGxheV90cmVlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24odil7XG5cdFx0aWYodGhpcy5wdCA9PT0gbnVsbCkgcmV0dXJuIFtmYWxzZSwgbnVsbF07XG5cdFx0dmFyIHIgPSBzcGxheSh0aGlzLnB0LCB2KTtcblx0XHR0aGlzLnB0ID0gclsxXTtcblx0XHRyZXR1cm4gW3JbMF0sIHJbMV1bMl1dO1xuXHR9O1xuXG5cdHNwbGF5X3RyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHYpe1xuXHRcdGlmKHRoaXMucHQgIT09IG51bGwpIHRoaXMucHQgPSByZW1vdmUodGhpcy5wdCwgdik7XG5cdH07XG5cblx0c3BsYXlfdHJlZS5wcm90b3R5cGUuaW5fb3JkZXJfdHJhdmVyc2FsID0gZnVuY3Rpb24oZm4pe1xuXHRcdGlmKHRoaXMucHQgIT09IG51bGwpIGluX29yZGVyX3RyYXZlcnNhbCh0aGlzLnB0LCBmbik7XG5cdH07XG5cblx0cmV0dXJuIHNwbGF5X3RyZWU7XG5cbn1cblxuIl19