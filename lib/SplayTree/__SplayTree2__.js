"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = __SplayTree2__;
function __SplayTree2__(diff) {

	var insert = function insert(pt, v) {
		var w = diff(v, pt[2]) > 0 | 0;
		if (pt[w] === null) pt[w] = [null, null, v];else insert(pt[w], v);
	};

	var splay = function splay(el, v) {

		var turn = [],
		    path = [],
		    pt = el,
		    f,
		    d,
		    w,
		    i,
		    a,
		    zoz,
		    zoz1,
		    zoz2,
		    pox,
		    p,
		    g;

		while (f === undefined) {
			d = diff(v, pt[2]);
			if (d === 0) f = true;else {
				w = d > 0 | 0;
				if (pt[w] === null) f = false;else {
					path.push(pt);
					turn.push(w);
					pt = pt[w];
				}
			}
		}

		i = turn.length - 1;
		a = [pt, null];
		for (; i > 0; i -= 2) {
			zoz2 = turn[i];
			zoz1 = turn[i - 1];
			pox = zoz1 === zoz2 | 0;
			g = path[i - 1];
			p = path[i];
			a[1] = p;

			g[zoz1] = a[pox][1 - zoz1];
			a[pox][1 - zoz1] = g;

			p[zoz2] = pt[1 - zoz2];
			pt[1 - zoz2] = p;
		}

		if (i === 0) {
			zoz = turn[0];
			el[zoz] = pt[1 - zoz];
			pt[1 - zoz] = el;
		}

		return [f, pt];
	};

	var remove = function remove(el, v) {
		var r = splay(el, v);
		if (!r[0]) return r[1];

		if (r[1][0] === null) return r[1][1];else if (r[1][1] === null) return r[1][0];else {
			r[1][0] = splay(r[1][0], v)[1];
			r[1][0][1] = r[1][1];
			return r[1][0];
		}
	};

	var in_order_traversal = function in_order_traversal(pt, fn) {
		if (pt[0] !== null) in_order_traversal(pt[0], fn);
		fn(pt[2]);
		if (pt[1] !== null) in_order_traversal(pt[1], fn);
	};

	var splay_tree = function splay_tree() {
		this.pt = null;
	};

	splay_tree.prototype.insert = function (v) {
		if (this.pt === null) this.pt = [null, null, v];else insert(this.pt, v);
	};

	splay_tree.prototype.find = function (v) {
		if (this.pt === null) return [false, null];
		var r = splay(this.pt, v);
		this.pt = r[1];
		return [r[0], r[1][2]];
	};

	splay_tree.prototype.remove = function (v) {
		if (this.pt !== null) this.pt = remove(this.pt, v);
	};

	splay_tree.prototype.in_order_traversal = function (fn) {
		if (this.pt !== null) in_order_traversal(this.pt, fn);
	};

	return splay_tree;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TcGxheVRyZWUvX19TcGxheVRyZWUyX18uanMiXSwibmFtZXMiOlsiX19TcGxheVRyZWUyX18iLCJkaWZmIiwiaW5zZXJ0IiwicHQiLCJ2IiwidyIsInNwbGF5IiwiZWwiLCJ0dXJuIiwicGF0aCIsImYiLCJkIiwiaSIsImEiLCJ6b3oiLCJ6b3oxIiwiem96MiIsInBveCIsInAiLCJnIiwidW5kZWZpbmVkIiwicHVzaCIsImxlbmd0aCIsInJlbW92ZSIsInIiLCJpbl9vcmRlcl90cmF2ZXJzYWwiLCJmbiIsInNwbGF5X3RyZWUiLCJwcm90b3R5cGUiLCJmaW5kIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFDd0JBLGM7QUFBVCxTQUFTQSxjQUFULENBQXdCQyxJQUF4QixFQUE2Qjs7QUFFM0MsS0FBSUMsU0FBUyxTQUFUQSxNQUFTLENBQVNDLEVBQVQsRUFBYUMsQ0FBYixFQUFlO0FBQzNCLE1BQUlDLElBQUlKLEtBQUtHLENBQUwsRUFBUUQsR0FBRyxDQUFILENBQVIsSUFBaUIsQ0FBakIsR0FBcUIsQ0FBN0I7QUFDQSxNQUFNQSxHQUFHRSxDQUFILE1BQVUsSUFBaEIsRUFBc0JGLEdBQUdFLENBQUgsSUFBUSxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWFELENBQWIsQ0FBUixDQUF0QixLQUNLRixPQUFPQyxHQUFHRSxDQUFILENBQVAsRUFBY0QsQ0FBZDtBQUNMLEVBSkQ7O0FBTUEsS0FBSUUsUUFBUSxTQUFSQSxLQUFRLENBQVNDLEVBQVQsRUFBYUgsQ0FBYixFQUFlOztBQUUxQixNQUFJSSxPQUFPLEVBQVg7QUFBQSxNQUFlQyxPQUFPLEVBQXRCO0FBQUEsTUFBMEJOLEtBQUtJLEVBQS9CO0FBQUEsTUFBbUNHLENBQW5DO0FBQUEsTUFBc0NDLENBQXRDO0FBQUEsTUFBeUNOLENBQXpDO0FBQUEsTUFBNENPLENBQTVDO0FBQUEsTUFBK0NDLENBQS9DO0FBQUEsTUFBa0RDLEdBQWxEO0FBQUEsTUFBdURDLElBQXZEO0FBQUEsTUFBNkRDLElB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QUE1QjtBQUNyQixFQUZEOztBQUlBLFFBQU9DLFVBQVA7QUFFQSIsImZpbGUiOiJfX1NwbGF5VHJlZTJfXy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX19TcGxheVRyZWUyX18oZGlmZil7XG5cblx0dmFyIGluc2VydCA9IGZ1bmN0aW9uKHB0LCB2KXtcblx0XHR2YXIgdyA9IGRpZmYodiwgcHRbMl0pID4gMCB8IDA7XG5cdFx0aWYgICAocHRbd10gPT09IG51bGwpIHB0W3ddID0gW251bGwsIG51bGwsIHZdO1xuXHRcdGVsc2UgaW5zZXJ0KHB0W3ddLCB2KTtcblx0fTtcblxuXHR2YXIgc3BsYXkgPSBmdW5jdGlvbihlbCwgdil7XG5cblx0XHR2YXIgdHVybiA9IFtdLCBwYXRoID0gW10sIHB0ID0gZWwsIGYsIGQsIHcsIGksIGEsIHpveiwgem96MSwgem96MiwgcG94LCBwLCBnO1xuXG5cdFx0d2hpbGUoZiA9PT0gdW5kZWZpbmVkKXtcblx0XHRcdGQgPSBkaWZmKHYsIHB0WzJdKTtcblx0XHRcdGlmKGQgPT09IDApIGYgPSB0cnVlO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHcgPSBkID4gMCB8IDA7XG5cdFx0XHRcdGlmKHB0W3ddID09PSBudWxsKSBmID0gZmFsc2U7XG5cdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0cGF0aC5wdXNoKHB0KTtcblx0XHRcdFx0XHR0dXJuLnB1c2godyk7XG5cdFx0XHRcdFx0cHQgPSBwdFt3XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGkgPSB0dXJuLmxlbmd0aCAtIDE7XG5cdFx0YSA9IFtwdCwgbnVsbF07XG5cdFx0Zm9yICg7IGkgPiAwOyBpIC09IDIpIHtcblx0XHRcdHpvejIgPSB0dXJuW2ldO1xuXHRcdFx0em96MSA9IHR1cm5baS0xXTtcblx0XHRcdHBveCA9IHpvejEgPT09IHpvejIgfCAwO1xuXHRcdFx0ZyA9IHBhdGhbaS0xXTtcblx0XHRcdHAgPSBwYXRoW2ldO1xuXHRcdFx0YVsxXSA9IHA7XG5cblx0XHRcdGdbem96MV0gPSBhW3BveF1bMSAtIHpvejFdO1xuXHRcdFx0YVtwb3hdWzEgLSB6b3oxXSA9IGc7XG5cblx0XHRcdHBbem96Ml0gPSBwdFsxIC0gem96Ml07XG5cdFx0XHRwdFsxIC0gem96Ml0gPSBwO1xuXHRcdH1cblxuXHRcdGlmIChpID09PSAwKSB7XG5cdFx0XHR6b3ogPSB0dXJuWzBdO1xuXHRcdFx0ZWxbem96XSA9IHB0WzEgLSB6b3pdO1xuXHRcdFx0cHRbMSAtIHpvel0gPSBlbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gW2YsIHB0XTtcblx0fTtcblxuXHR2YXIgcmVtb3ZlID0gZnVuY3Rpb24oZWwsIHYpe1xuXHRcdHZhciByID0gc3BsYXkoZWwsIHYpO1xuXHRcdGlmICghclswXSkgcmV0dXJuIHJbMV07XG5cblx0XHRpZiAgICAgIChyWzFdWzBdID09PSBudWxsKSByZXR1cm4gclsxXVsxXTtcblx0XHRlbHNlIGlmIChyWzFdWzFdID09PSBudWxsKSByZXR1cm4gclsxXVswXTtcblx0XHRlbHNlIHtcblx0XHRcdHJbMV1bMF0gPSBzcGxheShyWzFdWzBdLCB2KVsxXTtcblx0XHRcdHJbMV1bMF1bMV0gPSByWzFdWzFdO1xuXHRcdFx0cmV0dXJuIHJbMV1bMF07XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBpbl9vcmRlcl90cmF2ZXJzYWwgPSBmdW5jdGlvbihwdCwgZm4pe1xuXHRcdGlmKHB0WzBdICE9PSBudWxsKSBpbl9vcmRlcl90cmF2ZXJzYWwocHRbMF0sIGZuKTtcblx0XHRmbihwdFsyXSk7XG5cdFx0aWYocHRbMV0gIT09IG51bGwpIGluX29yZGVyX3RyYXZlcnNhbChwdFsxXSwgZm4pO1xuXHR9O1xuXG5cblx0dmFyIHNwbGF5X3RyZWUgPSBmdW5jdGlvbigpeyB0aGlzLnB0ID0gbnVsbDsgfTtcblxuXHRzcGxheV90cmVlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbih2KXtcblx0XHRpZih0aGlzLnB0ID09PSBudWxsKSB0aGlzLnB0ID0gW251bGwsIG51bGwsIHZdO1xuXHRcdGVsc2UgaW5zZXJ0KHRoaXMucHQsIHYpO1xuXHR9O1xuXG5cdHNwbGF5X3RyZWUucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbih2KXtcblx0XHRpZih0aGlzLnB0ID09PSBudWxsKSByZXR1cm4gW2ZhbHNlLCBudWxsXTtcblx0XHR2YXIgciA9IHNwbGF5KHRoaXMucHQsIHYpO1xuXHRcdHRoaXMucHQgPSByWzFdO1xuXHRcdHJldHVybiBbclswXSwgclsxXVsyXV07XG5cdH07XG5cblx0c3BsYXlfdHJlZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24odil7XG5cdFx0aWYodGhpcy5wdCAhPT0gbnVsbCkgdGhpcy5wdCA9IHJlbW92ZSh0aGlzLnB0LCB2KTtcblx0fTtcblxuXHRzcGxheV90cmVlLnByb3RvdHlwZS5pbl9vcmRlcl90cmF2ZXJzYWwgPSBmdW5jdGlvbihmbil7XG5cdFx0aWYodGhpcy5wdCAhPT0gbnVsbCkgaW5fb3JkZXJfdHJhdmVyc2FsKHRoaXMucHQsIGZuKTtcblx0fTtcblxuXHRyZXR1cm4gc3BsYXlfdHJlZTtcblxufVxuXG4iXX0=